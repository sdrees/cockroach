// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: config/zonepb/zone.proto

package zonepb

import (
	bytes "bytes"
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Constraint_Type int32

const (
	// DEPRECATED_POSITIVE has no effect on a replica's placement.
	Constraint_DEPRECATED_POSITIVE Constraint_Type = 0
	// REQUIRED ensures all replicas are placed on stores that match the
	// constraint. Replication will fail if there aren't any such stores.
	Constraint_REQUIRED Constraint_Type = 1
	// PROHIBITED will prevent replicas from having this key, value.
	Constraint_PROHIBITED Constraint_Type = 2
)

var Constraint_Type_name = map[int32]string{
	0: "DEPRECATED_POSITIVE",
	1: "REQUIRED",
	2: "PROHIBITED",
}

var Constraint_Type_value = map[string]int32{
	"DEPRECATED_POSITIVE": 0,
	"REQUIRED":            1,
	"PROHIBITED":          2,
}

func (x Constraint_Type) Enum() *Constraint_Type {
	p := new(Constraint_Type)
	*p = x
	return p
}

func (x Constraint_Type) String() string {
	return proto.EnumName(Constraint_Type_name, int32(x))
}

func (x *Constraint_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Constraint_Type_value, data, "Constraint_Type")
	if err != nil {
		return err
	}
	*x = Constraint_Type(value)
	return nil
}

func (Constraint_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_450fc84cee6c50bb, []int{1, 0}
}

// GCPolicy defines garbage collection policies which apply to MVCC
// values within a zone.
//
// TODO(spencer): flesh this out to include maximum number of values
//   as well as whether there's an intersection between max values
//   and TTL or a union.
type GCPolicy struct {
	// TTLSeconds specifies the maximum age of a value before it's
	// garbage collected. Only older versions of values are garbage
	// collected. Specifying <= 0 mean older versions are never GC'd.
	TTLSeconds int32 `protobuf:"varint,1,opt,name=ttl_seconds,json=ttlSeconds" json:"ttl_seconds"`
}

func (m *GCPolicy) Reset()         { *m = GCPolicy{} }
func (m *GCPolicy) String() string { return proto.CompactTextString(m) }
func (*GCPolicy) ProtoMessage()    {}
func (*GCPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_450fc84cee6c50bb, []int{0}
}
func (m *GCPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GCPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GCPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GCPolicy.Merge(m, src)
}
func (m *GCPolicy) XXX_Size() int {
	return m.Size()
}
func (m *GCPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_GCPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_GCPolicy proto.InternalMessageInfo

// Constraint constrains the stores that a replica can be stored on.
type Constraint struct {
	Type Constraint_Type `protobuf:"varint,1,opt,name=type,enum=cockroach.config.zonepb.Constraint_Type" json:"type"`
	// Key is only set if this is a constraint on locality.
	Key string `protobuf:"bytes,2,opt,name=key" json:"key"`
	// Value to constrain to.
	Value string `protobuf:"bytes,3,opt,name=value" json:"value"`
}

func (m *Constraint) Reset()      { *m = Constraint{} }
func (*Constraint) ProtoMessage() {}
func (*Constraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_450fc84cee6c50bb, []int{1}
}
func (m *Constraint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Constraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Constraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Constraint.Merge(m, src)
}
func (m *Constraint) XXX_Size() int {
	return m.Size()
}
func (m *Constraint) XXX_DiscardUnknown() {
	xxx_messageInfo_Constraint.DiscardUnknown(m)
}

var xxx_messageInfo_Constraint proto.InternalMessageInfo

// ConstraintsConjunction is a set of constraints that need to be satisfied
// together by a replica (i.e. by the replica's store).
type ConstraintsConjunction struct {
	// The number of replicas that should abide by the constraints below. If left
	// unspecified (i.e. set to 0), the constraints will apply to all replicas of
	// the range.
	// As of v2.0, only REQUIRED constraints are allowed when num_replicas is
	// set to a non-zero value.
	NumReplicas int32 `protobuf:"varint,7,opt,name=num_replicas,json=numReplicas" json:"num_replicas"`
	// The set of attributes and/or localities that need to be satisfied by the
	// store.
	Constraints []Constraint `protobuf:"bytes,6,rep,name=constraints" json:"constraints"`
}

func (m *ConstraintsConjunction) Reset()      { *m = ConstraintsConjunction{} }
func (*ConstraintsConjunction) ProtoMessage() {}
func (*ConstraintsConjunction) Descriptor() ([]byte, []int) {
	return fileDescriptor_450fc84cee6c50bb, []int{2}
}
func (m *ConstraintsConjunction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConstraintsConjunction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConstraintsConjunction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConstraintsConjunction.Merge(m, src)
}
func (m *ConstraintsConjunction) XXX_Size() int {
	return m.Size()
}
func (m *ConstraintsConjunction) XXX_DiscardUnknown() {
	xxx_messageInfo_ConstraintsConjunction.DiscardUnknown(m)
}

var xxx_messageInfo_ConstraintsConjunction proto.InternalMessageInfo

// LeasePreference specifies a preference about where range leases should be
// located.
type LeasePreference struct {
	Constraints []Constraint `protobuf:"bytes,1,rep,name=constraints" json:"constraints" yaml:"constraints,flow"`
}

func (m *LeasePreference) Reset()         { *m = LeasePreference{} }
func (m *LeasePreference) String() string { return proto.CompactTextString(m) }
func (*LeasePreference) ProtoMessage()    {}
func (*LeasePreference) Descriptor() ([]byte, []int) {
	return fileDescriptor_450fc84cee6c50bb, []int{3}
}
func (m *LeasePreference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeasePreference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LeasePreference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeasePreference.Merge(m, src)
}
func (m *LeasePreference) XXX_Size() int {
	return m.Size()
}
func (m *LeasePreference) XXX_DiscardUnknown() {
	xxx_messageInfo_LeasePreference.DiscardUnknown(m)
}

var xxx_messageInfo_LeasePreference proto.InternalMessageInfo

// ZoneConfig holds configuration that applies to one or more ranges.
//
// Note: when adding/removing fields here, be sure to update
// supportedZoneConfigOptions in the sql package, to synchronize
// with the code for ALTER ... CONFIGURE ZONE.
type ZoneConfig struct {
	RangeMinBytes *int64 `protobuf:"varint,2,opt,name=range_min_bytes,json=rangeMinBytes" json:"range_min_bytes,omitempty" yaml:"range_min_bytes"`
	RangeMaxBytes *int64 `protobuf:"varint,3,opt,name=range_max_bytes,json=rangeMaxBytes" json:"range_max_bytes,omitempty" yaml:"range_max_bytes"`
	// If GC policy is not set, uses the next highest, non-null policy
	// in the zone config hierarchy, up to the default policy if necessary.
	GC *GCPolicy `protobuf:"bytes,4,opt,name=gc" json:"gc,omitempty"`
	// GlobalReads specifies whether transactions operating over the range(s)
	// should be configured to provide non-blocking behavior, meaning that reads
	// can be served consistently from all replicas and do not block on writes. In
	// exchange, writes get pushed into the future and must wait on commit to
	// ensure linearizability. For more, see:
	//   https://github.com/cockroachdb/cockroach/blob/master/docs/RFCS/20200811_non_blocking_txns.md
	GlobalReads *bool `protobuf:"varint,12,opt,name=global_reads,json=globalReads" json:"global_reads,omitempty" yaml:"global_reads"`
	// NumReplicas specifies the desired number of replicas. This includes voting
	// and non-voting replicas.
	NumReplicas *int32 `protobuf:"varint,5,opt,name=num_replicas,json=numReplicas" json:"num_replicas,omitempty" yaml:"num_replicas"`
	// NumVoters specifies the desired number of voter replicas. If unspecified,
	// there are no non-voting replicas and NumReplicas will represent the number
	// of voters.
	NumVoters *int32 `protobuf:"varint,13,opt,name=num_voters,json=numVoters" json:"num_voters,omitempty" yaml:"num_voters"`
	// Constraints constrains which stores the replicas can be stored on. The
	// order in which the constraints are stored is arbitrary and may change.
	// https://github.com/cockroachdb/cockroach/blob/master/docs/RFCS/20160706_expressive_zone_config.md#constraint-system
	//
	// NOTE: The sum of the num_replicas fields of the Constraints must add up to
	// at most ZoneConfig.num_replicas, or there must be no more than a single
	// Constraints field with num_replicas set to 0.
	Constraints []ConstraintsConjunction `protobuf:"bytes,6,rep,name=constraints" json:"constraints" yaml:"constraints,flow"`
	// VoterConstraints constrains which stores the voting replicas can be stored
	// on. This field must be "compatible" with the `Constraints` field above, but
	// not necessarily a subset. The `VoterConstraints` are said to be compatible
	// with `Constraints` if none of the constraints in `Constraints` contradict
	// any of the constraints in `VoterConstraints`. In other words, they are
	// compatible if none of the "prohibitive" constraints in `Constraints` are
	// "required" constraints in `VoterConstraints`.
	VoterConstraints []ConstraintsConjunction `protobuf:"bytes,14,rep,name=voter_constraints,json=voterConstraints" json:"voter_constraints" yaml:"voter_constraints,flow"`
	// InheritedContraints specifies if the value in the Constraints field was
	// inherited from the zone's parent or specified explicitly by the user.
	//
	// NB: We need this extra field (and the `inherited_voter_constraints` below)
	// because the non-nullable nature of `constraints` and `voter_constraints`
	// means that there is no other way to disambiguate between an unset
	// `constraints` attribute and an empty one.
	InheritedConstraints bool `protobuf:"varint,10,opt,name=inherited_constraints,json=inheritedConstraints" json:"inherited_constraints"`
	// InheritedVoterConstraints indicates whether the value in the
	// VoterConstraints field was inherited from the zone's parent or explicitly
	// specified by the user.
	InheritedVoterConstraints bool `protobuf:"varint,15,opt,name=inherited_voter_constraints,json=inheritedVoterConstraints" json:"inherited_voter_constraints"`
	// LeasePreference stores information about where the user would prefer for
	// range leases to be placed. Leases are allowed to be placed elsewhere if
	// needed, but will follow the provided preference when possible.
	//
	// More than one lease preference is allowed, but they should be ordered from
	// most preferred to lease preferred. The first preference that an existing
	// replica of a range matches will take priority.
	LeasePreferences []LeasePreference `protobuf:"bytes,9,rep,name=lease_preferences,json=leasePreferences" json:"lease_preferences" yaml:"lease_preferences,flow"`
	// InheritedLeasePreferences specifies if the value in the LeasePreferences field
	// was inherited from the zone's parent or specified explicitly by the user.
	InheritedLeasePreferences bool `protobuf:"varint,11,opt,name=inherited_lease_preferences,json=inheritedLeasePreferences" json:"inherited_lease_preferences"`
	// Subzones stores config overrides for "subzones", each of which represents
	// either a SQL table index or a partition of a SQL table index. Subzones are
	// not applicable when the zone does not represent a SQL table (i.e., when the
	// zone represents a database, a special system range, or is itself a
	// subzone.)
	Subzones []Subzone `protobuf:"bytes,8,rep,name=subzones" json:"subzones" yaml:"-"`
	// SubzoneSpans maps each key span in a subzone to the slice index of an entry
	// in SubzoneConfig. Spans are non-overlapping and sorted by start key to
	// allow binary searching. SubzoneSpans can be easily derived from a
	// TableDescriptor, but are denormalized here to make GetZoneConfigForKey
	// lookups efficient.
	SubzoneSpans []SubzoneSpan `protobuf:"bytes,7,rep,name=subzone_spans,json=subzoneSpans" json:"subzone_spans" yaml:"-"`
}

func (m *ZoneConfig) Reset()         { *m = ZoneConfig{} }
func (m *ZoneConfig) String() string { return proto.CompactTextString(m) }
func (*ZoneConfig) ProtoMessage()    {}
func (*ZoneConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_450fc84cee6c50bb, []int{4}
}
func (m *ZoneConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZoneConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ZoneConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZoneConfig.Merge(m, src)
}
func (m *ZoneConfig) XXX_Size() int {
	return m.Size()
}
func (m *ZoneConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ZoneConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ZoneConfig proto.InternalMessageInfo

type Subzone struct {
	// IndexID is the ID of the SQL table index that the subzone represents.
	// Always set.
	IndexID uint32 `protobuf:"varint,1,opt,name=index_id,json=indexId" json:"index_id"`
	// PartitionName is the partition of the SQL table index that the subzone
	// represents. It is empty when the subzone represents the entire index.
	PartitionName string `protobuf:"bytes,2,opt,name=partition_name,json=partitionName" json:"partition_name"`
	// Config stores the ZoneConfig that applies to this Subzone. It never
	// contains nested subzones.
	Config ZoneConfig `protobuf:"bytes,3,opt,name=config" json:"config"`
}

func (m *Subzone) Reset()         { *m = Subzone{} }
func (m *Subzone) String() string { return proto.CompactTextString(m) }
func (*Subzone) ProtoMessage()    {}
func (*Subzone) Descriptor() ([]byte, []int) {
	return fileDescriptor_450fc84cee6c50bb, []int{5}
}
func (m *Subzone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subzone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Subzone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subzone.Merge(m, src)
}
func (m *Subzone) XXX_Size() int {
	return m.Size()
}
func (m *Subzone) XXX_DiscardUnknown() {
	xxx_messageInfo_Subzone.DiscardUnknown(m)
}

var xxx_messageInfo_Subzone proto.InternalMessageInfo

type SubzoneSpan struct {
	// Key stores a key suffix that represents the inclusive lower bound for this
	// span. The SQL table prefix, like /Table/51/, is omitted.
	//
	// Both Key and EndKey, below, are cast to roachpb.Key for convenience, but
	// there's no technical restriction that prevents switching them to []byte or
	// another type that communicates their missing prefix.
	Key github_com_cockroachdb_cockroach_pkg_roachpb.Key `protobuf:"bytes,1,opt,name=key,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.Key" json:"key,omitempty"`
	// EndKey stores a key suffix that represents the exclusive upper bound for
	// this span. Like with Key, the SQL table prefix is omitted. If EndKey is
	// empty, it is assumed to be Key.PrefixEnd().
	EndKey github_com_cockroachdb_cockroach_pkg_roachpb.Key `protobuf:"bytes,2,opt,name=end_key,json=endKey,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.Key" json:"end_key,omitempty"`
	// SubzoneIndex is the slice index of the Subzone this span belongs to in the
	// parent ZoneConfig's Subzones field.
	SubzoneIndex int32 `protobuf:"varint,3,opt,name=subzone_index,json=subzoneIndex" json:"subzone_index"`
}

func (m *SubzoneSpan) Reset()         { *m = SubzoneSpan{} }
func (m *SubzoneSpan) String() string { return proto.CompactTextString(m) }
func (*SubzoneSpan) ProtoMessage()    {}
func (*SubzoneSpan) Descriptor() ([]byte, []int) {
	return fileDescriptor_450fc84cee6c50bb, []int{6}
}
func (m *SubzoneSpan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubzoneSpan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SubzoneSpan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubzoneSpan.Merge(m, src)
}
func (m *SubzoneSpan) XXX_Size() int {
	return m.Size()
}
func (m *SubzoneSpan) XXX_DiscardUnknown() {
	xxx_messageInfo_SubzoneSpan.DiscardUnknown(m)
}

var xxx_messageInfo_SubzoneSpan proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.config.zonepb.Constraint_Type", Constraint_Type_name, Constraint_Type_value)
	proto.RegisterType((*GCPolicy)(nil), "cockroach.config.zonepb.GCPolicy")
	proto.RegisterType((*Constraint)(nil), "cockroach.config.zonepb.Constraint")
	proto.RegisterType((*ConstraintsConjunction)(nil), "cockroach.config.zonepb.ConstraintsConjunction")
	proto.RegisterType((*LeasePreference)(nil), "cockroach.config.zonepb.LeasePreference")
	proto.RegisterType((*ZoneConfig)(nil), "cockroach.config.zonepb.ZoneConfig")
	proto.RegisterType((*Subzone)(nil), "cockroach.config.zonepb.Subzone")
	proto.RegisterType((*SubzoneSpan)(nil), "cockroach.config.zonepb.SubzoneSpan")
}

func init() { proto.RegisterFile("config/zonepb/zone.proto", fileDescriptor_450fc84cee6c50bb) }

var fileDescriptor_450fc84cee6c50bb = []byte{
	// 961 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x3f, 0x73, 0xe3, 0x44,
	0x14, 0xf7, 0xda, 0x8e, 0xad, 0x3c, 0xdb, 0x89, 0xb3, 0x77, 0x97, 0x88, 0x30, 0x58, 0x46, 0xc0,
	0x60, 0xfe, 0xd9, 0x4c, 0xb8, 0xe6, 0x32, 0x43, 0x71, 0xb2, 0xcd, 0x61, 0x92, 0xbb, 0x33, 0x8a,
	0x49, 0x71, 0x14, 0x1a, 0x59, 0xde, 0x38, 0x22, 0xf2, 0x4a, 0x23, 0xc9, 0x47, 0xcc, 0xd0, 0xdd,
	0x17, 0xa0, 0xa4, 0xa0, 0xc8, 0x37, 0xa0, 0xe5, 0x23, 0xa4, 0x3c, 0xba, 0xa3, 0xf1, 0x80, 0xd3,
	0x50, 0xa7, 0x83, 0x8a, 0xd1, 0xae, 0x6c, 0xc9, 0x4e, 0x0c, 0x21, 0x95, 0x56, 0xfb, 0xde, 0xfb,
	0xbd, 0xdf, 0xfb, 0xb3, 0xef, 0x81, 0x68, 0xd8, 0xf4, 0xc8, 0xec, 0xd7, 0xbe, 0xb3, 0x29, 0x71,
	0xba, 0xec, 0x53, 0x75, 0x5c, 0xdb, 0xb7, 0xf1, 0x96, 0x61, 0x1b, 0x27, 0xae, 0xad, 0x1b, 0xc7,
	0x55, 0xae, 0x53, 0xe5, 0x3a, 0xdb, 0x77, 0xfb, 0x76, 0xdf, 0x66, 0x3a, 0xb5, 0xe0, 0xc4, 0xd5,
	0xe5, 0x16, 0x08, 0x8f, 0xea, 0x6d, 0xdb, 0x32, 0x8d, 0x11, 0xfe, 0x04, 0x72, 0xbe, 0x6f, 0x69,
	0x1e, 0x31, 0x6c, 0xda, 0xf3, 0x44, 0x54, 0x46, 0x95, 0x15, 0x05, 0x9f, 0x8f, 0xa5, 0xc4, 0x64,
	0x2c, 0x41, 0xa7, 0xb3, 0x7f, 0xc0, 0x25, 0x2a, 0xf8, 0xbe, 0x15, 0x9e, 0x77, 0x85, 0x5f, 0xce,
	0x24, 0xf4, 0xe7, 0x99, 0x84, 0xe4, 0x5f, 0x11, 0x40, 0xdd, 0xa6, 0x9e, 0xef, 0xea, 0x26, 0xf5,
	0xb1, 0x02, 0x69, 0x7f, 0xe4, 0x10, 0x06, 0xb3, 0xb6, 0x53, 0xa9, 0x2e, 0xe1, 0x55, 0x8d, 0x4c,
	0xaa, 0x9d, 0x91, 0x43, 0x94, 0x74, 0xe0, 0x50, 0x65, 0xb6, 0x78, 0x13, 0x52, 0x27, 0x64, 0x24,
	0x26, 0xcb, 0xa8, 0xb2, 0x1a, 0x0a, 0x82, 0x0b, 0xbc, 0x0d, 0x2b, 0xcf, 0x75, 0x6b, 0x48, 0xc4,
	0x54, 0x4c, 0xc2, 0xaf, 0xe4, 0x4f, 0x21, 0x1d, 0xe0, 0xe0, 0x2d, 0xb8, 0xd3, 0x68, 0xb6, 0xd5,
	0x66, 0xfd, 0x61, 0xa7, 0xd9, 0xd0, 0xda, 0x4f, 0x0f, 0x5a, 0x9d, 0xd6, 0x61, 0xb3, 0x98, 0xc0,
	0x79, 0x10, 0xd4, 0xe6, 0x97, 0x5f, 0xb5, 0xd4, 0x66, 0xa3, 0x88, 0xf0, 0x1a, 0x40, 0x5b, 0x7d,
	0xfa, 0x79, 0x4b, 0x69, 0x75, 0x9a, 0x8d, 0x62, 0x72, 0x37, 0xff, 0xe3, 0x99, 0x94, 0x98, 0xc5,
	0xf4, 0x13, 0x82, 0xcd, 0x88, 0xa0, 0x57, 0xb7, 0xe9, 0x37, 0x43, 0x6a, 0xf8, 0xa6, 0x4d, 0xf1,
	0xbb, 0x90, 0xa7, 0xc3, 0x81, 0xe6, 0x12, 0xc7, 0x32, 0x0d, 0xdd, 0x13, 0xb3, 0x2c, 0x5d, 0x9c,
	0x4a, 0x8e, 0x0e, 0x07, 0x6a, 0x28, 0xc0, 0x7b, 0x90, 0x33, 0x22, 0x08, 0x31, 0x53, 0x4e, 0x55,
	0x72, 0x3b, 0x6f, 0xdd, 0x20, 0x1f, 0x53, 0xb0, 0x98, 0xf5, 0x02, 0xbd, 0x17, 0x08, 0xd6, 0xf7,
	0x89, 0xee, 0x91, 0xb6, 0x4b, 0x8e, 0x88, 0x4b, 0xa8, 0x41, 0xf0, 0xd1, 0xbc, 0x3b, 0x74, 0x73,
	0x77, 0x52, 0xe0, 0xee, 0x72, 0x2c, 0x6d, 0x8d, 0xf4, 0x81, 0xb5, 0x2b, 0xc7, 0x50, 0x3e, 0x3c,
	0xb2, 0xec, 0x6f, 0xe5, 0x79, 0x26, 0x51, 0xe1, 0xff, 0x12, 0x00, 0x9e, 0xd9, 0x94, 0xd4, 0x19,
	0x30, 0x56, 0x60, 0xdd, 0xd5, 0x69, 0x9f, 0x68, 0x03, 0x93, 0x6a, 0xdd, 0x91, 0x4f, 0x3c, 0x56,
	0xc0, 0x94, 0xb2, 0x7d, 0x39, 0x96, 0x36, 0x39, 0xf6, 0x82, 0x82, 0xac, 0x16, 0xd8, 0xcd, 0x63,
	0x93, 0x2a, 0xc1, 0x7f, 0x0c, 0x43, 0x3f, 0x0d, 0x31, 0x52, 0x4b, 0x30, 0xa6, 0x0a, 0x33, 0x0c,
	0xfd, 0x94, 0x63, 0x3c, 0x80, 0x64, 0xdf, 0x10, 0xd3, 0x65, 0x54, 0xc9, 0xed, 0xbc, 0xb9, 0x34,
	0xfe, 0x69, 0xf7, 0x2b, 0x99, 0xc9, 0x58, 0x4a, 0x3e, 0xaa, 0xab, 0xc9, 0xbe, 0x81, 0x77, 0x21,
	0xdf, 0xb7, 0xec, 0xae, 0x6e, 0x69, 0x2e, 0xd1, 0x7b, 0x9e, 0x98, 0x2f, 0xa3, 0x8a, 0xa0, 0x6c,
	0x5d, 0x8e, 0xa5, 0x3b, 0xdc, 0x77, 0x5c, 0x2a, 0xab, 0x39, 0xfe, 0xab, 0x06, 0x7f, 0x81, 0xed,
	0x5c, 0x5f, 0xac, 0xb0, 0xbe, 0x88, 0xd9, 0xc6, 0xa5, 0xf2, 0x7c, 0xab, 0xdc, 0x07, 0x08, 0xa4,
	0xcf, 0x6d, 0x9f, 0xb8, 0x9e, 0x58, 0x60, 0x96, 0xf7, 0x2e, 0xc7, 0xd2, 0x46, 0x64, 0xc9, 0x65,
	0xb2, 0xba, 0x4a, 0x87, 0x83, 0x43, 0x76, 0xc6, 0xee, 0x75, 0x0d, 0x56, 0xbb, 0x41, 0xc5, 0xe3,
	0xfd, 0xfc, 0xff, 0xaa, 0x8f, 0x5f, 0x20, 0xd8, 0x60, 0x54, 0xb4, 0xb8, 0xeb, 0xb5, 0xdb, 0xb9,
	0x7e, 0x27, 0x74, 0xfd, 0x06, 0x77, 0x7d, 0x05, 0x37, 0x24, 0x50, 0x64, 0x82, 0x18, 0x06, 0x7e,
	0x00, 0xf7, 0x4c, 0x7a, 0x4c, 0x5c, 0xd3, 0x27, 0xbd, 0x39, 0x22, 0xc0, 0x0a, 0xc6, 0xdf, 0xcf,
	0xdd, 0x99, 0x4a, 0xdc, 0xb4, 0x01, 0xaf, 0x47, 0xa6, 0x57, 0x23, 0x59, 0x8f, 0x01, 0xbc, 0x36,
	0x53, 0x3c, 0x5c, 0x24, 0xf0, 0x3d, 0x6c, 0x58, 0xc1, 0xfb, 0xd3, 0x9c, 0xd9, 0x03, 0xf4, 0xc4,
	0x55, 0x96, 0x85, 0xe5, 0x13, 0x6f, 0xe1, 0xc5, 0x2e, 0x86, 0x7f, 0x05, 0x70, 0x1a, 0xbe, 0x35,
	0x6f, 0xb7, 0x10, 0xc3, 0x55, 0x1e, 0xb9, 0x6b, 0x63, 0xd8, 0x5f, 0x44, 0x79, 0x02, 0x82, 0x37,
	0xec, 0x06, 0xdc, 0x3c, 0x51, 0x60, 0xd4, 0xcb, 0x4b, 0xa9, 0x1f, 0x70, 0x45, 0xa5, 0x18, 0x52,
	0x16, 0x38, 0xe5, 0x8f, 0x64, 0x75, 0x86, 0x81, 0xbf, 0x86, 0x42, 0x78, 0xd6, 0x3c, 0x47, 0xa7,
	0xc1, 0x64, 0x0c, 0x40, 0xdf, 0xfe, 0x2f, 0xd0, 0x03, 0x47, 0xa7, 0xd7, 0x00, 0xe7, 0xbd, 0x48,
	0x1c, 0x9b, 0x3a, 0x5f, 0xa4, 0x05, 0x54, 0x4c, 0xca, 0x3f, 0x23, 0xc8, 0x86, 0xf6, 0xf8, 0x7d,
	0x10, 0x4c, 0xda, 0x23, 0xa7, 0x9a, 0xd9, 0x63, 0x5b, 0xa7, 0xa0, 0xac, 0x87, 0xcb, 0x2b, 0xdb,
	0x0a, 0xee, 0x5b, 0x0d, 0x35, 0xcb, 0x14, 0x5a, 0x3d, 0xfc, 0x01, 0xac, 0x39, 0xba, 0xeb, 0x9b,
	0x41, 0xff, 0x69, 0x54, 0x1f, 0x90, 0xb9, 0x25, 0x53, 0x98, 0xc9, 0x9e, 0xe8, 0x03, 0x82, 0x1f,
	0x42, 0x86, 0x33, 0x66, 0x43, 0xe8, 0xdf, 0xa6, 0x69, 0x34, 0x06, 0x43, 0xa4, 0xd0, 0x30, 0x36,
	0x2d, 0x7f, 0x43, 0x90, 0x8b, 0x45, 0x8c, 0x3f, 0xe3, 0x3b, 0x2e, 0x20, 0x9c, 0x57, 0xee, 0xff,
	0x3d, 0x96, 0x3e, 0xee, 0x9b, 0xfe, 0xf1, 0xb0, 0x5b, 0x35, 0xec, 0x41, 0x6d, 0xe6, 0xa7, 0xd7,
	0x8d, 0xce, 0x35, 0xe7, 0xa4, 0x5f, 0x63, 0x27, 0xa7, 0x5b, 0xdd, 0x23, 0x23, 0xbe, 0x13, 0x1f,
	0x43, 0x96, 0xd0, 0x9e, 0x36, 0xdd, 0x97, 0xb7, 0xc5, 0xca, 0x10, 0xda, 0xdb, 0x23, 0x23, 0xfc,
	0x5e, 0x54, 0x45, 0x96, 0x33, 0x16, 0xfa, 0x74, 0xbf, 0x4d, 0x6b, 0xc2, 0xd2, 0x1a, 0xc5, 0xa6,
	0x54, 0xce, 0xff, 0x28, 0x25, 0xce, 0x27, 0x25, 0xf4, 0x72, 0x52, 0x42, 0xaf, 0x26, 0x25, 0xf4,
	0xfb, 0xa4, 0x84, 0x7e, 0xb8, 0x28, 0x25, 0x5e, 0x5e, 0x94, 0x12, 0xaf, 0x2e, 0x4a, 0x89, 0x67,
	0x19, 0x9e, 0xa8, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x07, 0x98, 0x01, 0xc1, 0x08, 0x00,
	0x00,
}

func (this *GCPolicy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GCPolicy)
	if !ok {
		that2, ok := that.(GCPolicy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TTLSeconds != that1.TTLSeconds {
		return false
	}
	return true
}
func (this *Constraint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Constraint)
	if !ok {
		that2, ok := that.(Constraint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *ConstraintsConjunction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConstraintsConjunction)
	if !ok {
		that2, ok := that.(ConstraintsConjunction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NumReplicas != that1.NumReplicas {
		return false
	}
	if len(this.Constraints) != len(that1.Constraints) {
		return false
	}
	for i := range this.Constraints {
		if !this.Constraints[i].Equal(&that1.Constraints[i]) {
			return false
		}
	}
	return true
}
func (this *LeasePreference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LeasePreference)
	if !ok {
		that2, ok := that.(LeasePreference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Constraints) != len(that1.Constraints) {
		return false
	}
	for i := range this.Constraints {
		if !this.Constraints[i].Equal(&that1.Constraints[i]) {
			return false
		}
	}
	return true
}
func (this *ZoneConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ZoneConfig)
	if !ok {
		that2, ok := that.(ZoneConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RangeMinBytes != nil && that1.RangeMinBytes != nil {
		if *this.RangeMinBytes != *that1.RangeMinBytes {
			return false
		}
	} else if this.RangeMinBytes != nil {
		return false
	} else if that1.RangeMinBytes != nil {
		return false
	}
	if this.RangeMaxBytes != nil && that1.RangeMaxBytes != nil {
		if *this.RangeMaxBytes != *that1.RangeMaxBytes {
			return false
		}
	} else if this.RangeMaxBytes != nil {
		return false
	} else if that1.RangeMaxBytes != nil {
		return false
	}
	if !this.GC.Equal(that1.GC) {
		return false
	}
	if this.GlobalReads != nil && that1.GlobalReads != nil {
		if *this.GlobalReads != *that1.GlobalReads {
			return false
		}
	} else if this.GlobalReads != nil {
		return false
	} else if that1.GlobalReads != nil {
		return false
	}
	if this.NumReplicas != nil && that1.NumReplicas != nil {
		if *this.NumReplicas != *that1.NumReplicas {
			return false
		}
	} else if this.NumReplicas != nil {
		return false
	} else if that1.NumReplicas != nil {
		return false
	}
	if this.NumVoters != nil && that1.NumVoters != nil {
		if *this.NumVoters != *that1.NumVoters {
			return false
		}
	} else if this.NumVoters != nil {
		return false
	} else if that1.NumVoters != nil {
		return false
	}
	if len(this.Constraints) != len(that1.Constraints) {
		return false
	}
	for i := range this.Constraints {
		if !this.Constraints[i].Equal(&that1.Constraints[i]) {
			return false
		}
	}
	if len(this.VoterConstraints) != len(that1.VoterConstraints) {
		return false
	}
	for i := range this.VoterConstraints {
		if !this.VoterConstraints[i].Equal(&that1.VoterConstraints[i]) {
			return false
		}
	}
	if this.InheritedConstraints != that1.InheritedConstraints {
		return false
	}
	if this.InheritedVoterConstraints != that1.InheritedVoterConstraints {
		return false
	}
	if len(this.LeasePreferences) != len(that1.LeasePreferences) {
		return false
	}
	for i := range this.LeasePreferences {
		if !this.LeasePreferences[i].Equal(&that1.LeasePreferences[i]) {
			return false
		}
	}
	if this.InheritedLeasePreferences != that1.InheritedLeasePreferences {
		return false
	}
	if len(this.Subzones) != len(that1.Subzones) {
		return false
	}
	for i := range this.Subzones {
		if !this.Subzones[i].Equal(&that1.Subzones[i]) {
			return false
		}
	}
	if len(this.SubzoneSpans) != len(that1.SubzoneSpans) {
		return false
	}
	for i := range this.SubzoneSpans {
		if !this.SubzoneSpans[i].Equal(&that1.SubzoneSpans[i]) {
			return false
		}
	}
	return true
}
func (this *Subzone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Subzone)
	if !ok {
		that2, ok := that.(Subzone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IndexID != that1.IndexID {
		return false
	}
	if this.PartitionName != that1.PartitionName {
		return false
	}
	if !this.Config.Equal(&that1.Config) {
		return false
	}
	return true
}
func (this *SubzoneSpan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubzoneSpan)
	if !ok {
		that2, ok := that.(SubzoneSpan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	if !bytes.Equal(this.EndKey, that1.EndKey) {
		return false
	}
	if this.SubzoneIndex != that1.SubzoneIndex {
		return false
	}
	return true
}
func (m *GCPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GCPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GCPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintZone(dAtA, i, uint64(m.TTLSeconds))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Constraint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Constraint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Constraint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Value)
	copy(dAtA[i:], m.Value)
	i = encodeVarintZone(dAtA, i, uint64(len(m.Value)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Key)
	copy(dAtA[i:], m.Key)
	i = encodeVarintZone(dAtA, i, uint64(len(m.Key)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintZone(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ConstraintsConjunction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConstraintsConjunction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConstraintsConjunction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintZone(dAtA, i, uint64(m.NumReplicas))
	i--
	dAtA[i] = 0x38
	if len(m.Constraints) > 0 {
		for iNdEx := len(m.Constraints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Constraints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZone(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	return len(dAtA) - i, nil
}

func (m *LeasePreference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeasePreference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeasePreference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Constraints) > 0 {
		for iNdEx := len(m.Constraints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Constraints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZone(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ZoneConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZoneConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZoneConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.InheritedVoterConstraints {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x78
	if len(m.VoterConstraints) > 0 {
		for iNdEx := len(m.VoterConstraints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VoterConstraints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZone(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.NumVoters != nil {
		i = encodeVarintZone(dAtA, i, uint64(*m.NumVoters))
		i--
		dAtA[i] = 0x68
	}
	if m.GlobalReads != nil {
		i--
		if *m.GlobalReads {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	i--
	if m.InheritedLeasePreferences {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x58
	i--
	if m.InheritedConstraints {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x50
	if len(m.LeasePreferences) > 0 {
		for iNdEx := len(m.LeasePreferences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LeasePreferences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZone(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Subzones) > 0 {
		for iNdEx := len(m.Subzones) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subzones[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZone(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.SubzoneSpans) > 0 {
		for iNdEx := len(m.SubzoneSpans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubzoneSpans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZone(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Constraints) > 0 {
		for iNdEx := len(m.Constraints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Constraints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZone(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.NumReplicas != nil {
		i = encodeVarintZone(dAtA, i, uint64(*m.NumReplicas))
		i--
		dAtA[i] = 0x28
	}
	if m.GC != nil {
		{
			size, err := m.GC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZone(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.RangeMaxBytes != nil {
		i = encodeVarintZone(dAtA, i, uint64(*m.RangeMaxBytes))
		i--
		dAtA[i] = 0x18
	}
	if m.RangeMinBytes != nil {
		i = encodeVarintZone(dAtA, i, uint64(*m.RangeMinBytes))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *Subzone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subzone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Subzone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintZone(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	i -= len(m.PartitionName)
	copy(dAtA[i:], m.PartitionName)
	i = encodeVarintZone(dAtA, i, uint64(len(m.PartitionName)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintZone(dAtA, i, uint64(m.IndexID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SubzoneSpan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubzoneSpan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubzoneSpan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintZone(dAtA, i, uint64(m.SubzoneIndex))
	i--
	dAtA[i] = 0x18
	if m.EndKey != nil {
		i -= len(m.EndKey)
		copy(dAtA[i:], m.EndKey)
		i = encodeVarintZone(dAtA, i, uint64(len(m.EndKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintZone(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintZone(dAtA []byte, offset int, v uint64) int {
	offset -= sovZone(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedGCPolicy(r randyZone, easy bool) *GCPolicy {
	this := &GCPolicy{}
	this.TTLSeconds = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.TTLSeconds *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedConstraint(r randyZone, easy bool) *Constraint {
	this := &Constraint{}
	this.Type = Constraint_Type([]int32{0, 1, 2}[r.Intn(3)])
	this.Key = string(randStringZone(r))
	this.Value = string(randStringZone(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedConstraintsConjunction(r randyZone, easy bool) *ConstraintsConjunction {
	this := &ConstraintsConjunction{}
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Constraints = make([]Constraint, v1)
		for i := 0; i < v1; i++ {
			v2 := NewPopulatedConstraint(r, easy)
			this.Constraints[i] = *v2
		}
	}
	this.NumReplicas = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.NumReplicas *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLeasePreference(r randyZone, easy bool) *LeasePreference {
	this := &LeasePreference{}
	if r.Intn(5) != 0 {
		v3 := r.Intn(5)
		this.Constraints = make([]Constraint, v3)
		for i := 0; i < v3; i++ {
			v4 := NewPopulatedConstraint(r, easy)
			this.Constraints[i] = *v4
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedZoneConfig(r randyZone, easy bool) *ZoneConfig {
	this := &ZoneConfig{}
	if r.Intn(5) != 0 {
		v5 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		this.RangeMinBytes = &v5
	}
	if r.Intn(5) != 0 {
		v6 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		this.RangeMaxBytes = &v6
	}
	if r.Intn(5) != 0 {
		this.GC = NewPopulatedGCPolicy(r, easy)
	}
	if r.Intn(5) != 0 {
		v7 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		this.NumReplicas = &v7
	}
	if r.Intn(5) != 0 {
		v8 := r.Intn(5)
		this.Constraints = make([]ConstraintsConjunction, v8)
		for i := 0; i < v8; i++ {
			v9 := NewPopulatedConstraintsConjunction(r, easy)
			this.Constraints[i] = *v9
		}
	}
	if r.Intn(5) != 0 {
		v10 := r.Intn(5)
		this.SubzoneSpans = make([]SubzoneSpan, v10)
		for i := 0; i < v10; i++ {
			v11 := NewPopulatedSubzoneSpan(r, easy)
			this.SubzoneSpans[i] = *v11
		}
	}
	if r.Intn(5) == 0 {
		v12 := r.Intn(5)
		this.Subzones = make([]Subzone, v12)
		for i := 0; i < v12; i++ {
			v13 := NewPopulatedSubzone(r, easy)
			this.Subzones[i] = *v13
		}
	}
	if r.Intn(5) != 0 {
		v14 := r.Intn(5)
		this.LeasePreferences = make([]LeasePreference, v14)
		for i := 0; i < v14; i++ {
			v15 := NewPopulatedLeasePreference(r, easy)
			this.LeasePreferences[i] = *v15
		}
	}
	this.InheritedConstraints = bool(bool(r.Intn(2) == 0))
	this.InheritedLeasePreferences = bool(bool(r.Intn(2) == 0))
	if r.Intn(5) != 0 {
		v16 := bool(bool(r.Intn(2) == 0))
		this.GlobalReads = &v16
	}
	if r.Intn(5) != 0 {
		v17 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v17 *= -1
		}
		this.NumVoters = &v17
	}
	if r.Intn(5) != 0 {
		v18 := r.Intn(5)
		this.VoterConstraints = make([]ConstraintsConjunction, v18)
		for i := 0; i < v18; i++ {
			v19 := NewPopulatedConstraintsConjunction(r, easy)
			this.VoterConstraints[i] = *v19
		}
	}
	this.InheritedVoterConstraints = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSubzone(r randyZone, easy bool) *Subzone {
	this := &Subzone{}
	this.IndexID = uint32(r.Uint32())
	this.PartitionName = string(randStringZone(r))
	v20 := NewPopulatedZoneConfig(r, easy)
	this.Config = *v20
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSubzoneSpan(r randyZone, easy bool) *SubzoneSpan {
	this := &SubzoneSpan{}
	if r.Intn(5) != 0 {
		v21 := r.Intn(100)
		this.Key = make(github_com_cockroachdb_cockroach_pkg_roachpb.Key, v21)
		for i := 0; i < v21; i++ {
			this.Key[i] = byte(r.Intn(256))
		}
	}
	if r.Intn(5) != 0 {
		v22 := r.Intn(100)
		this.EndKey = make(github_com_cockroachdb_cockroach_pkg_roachpb.Key, v22)
		for i := 0; i < v22; i++ {
			this.EndKey[i] = byte(r.Intn(256))
		}
	}
	this.SubzoneIndex = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.SubzoneIndex *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyZone interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneZone(r randyZone) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringZone(r randyZone) string {
	v23 := r.Intn(100)
	tmps := make([]rune, v23)
	for i := 0; i < v23; i++ {
		tmps[i] = randUTF8RuneZone(r)
	}
	return string(tmps)
}
func randUnrecognizedZone(r randyZone, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldZone(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldZone(dAtA []byte, r randyZone, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateZone(dAtA, uint64(key))
		v24 := r.Int63()
		if r.Intn(2) == 0 {
			v24 *= -1
		}
		dAtA = encodeVarintPopulateZone(dAtA, uint64(v24))
	case 1:
		dAtA = encodeVarintPopulateZone(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateZone(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateZone(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateZone(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateZone(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GCPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZone(uint64(m.TTLSeconds))
	return n
}

func (m *Constraint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZone(uint64(m.Type))
	l = len(m.Key)
	n += 1 + l + sovZone(uint64(l))
	l = len(m.Value)
	n += 1 + l + sovZone(uint64(l))
	return n
}

func (m *ConstraintsConjunction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Constraints) > 0 {
		for _, e := range m.Constraints {
			l = e.Size()
			n += 1 + l + sovZone(uint64(l))
		}
	}
	n += 1 + sovZone(uint64(m.NumReplicas))
	return n
}

func (m *LeasePreference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Constraints) > 0 {
		for _, e := range m.Constraints {
			l = e.Size()
			n += 1 + l + sovZone(uint64(l))
		}
	}
	return n
}

func (m *ZoneConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RangeMinBytes != nil {
		n += 1 + sovZone(uint64(*m.RangeMinBytes))
	}
	if m.RangeMaxBytes != nil {
		n += 1 + sovZone(uint64(*m.RangeMaxBytes))
	}
	if m.GC != nil {
		l = m.GC.Size()
		n += 1 + l + sovZone(uint64(l))
	}
	if m.NumReplicas != nil {
		n += 1 + sovZone(uint64(*m.NumReplicas))
	}
	if len(m.Constraints) > 0 {
		for _, e := range m.Constraints {
			l = e.Size()
			n += 1 + l + sovZone(uint64(l))
		}
	}
	if len(m.SubzoneSpans) > 0 {
		for _, e := range m.SubzoneSpans {
			l = e.Size()
			n += 1 + l + sovZone(uint64(l))
		}
	}
	if len(m.Subzones) > 0 {
		for _, e := range m.Subzones {
			l = e.Size()
			n += 1 + l + sovZone(uint64(l))
		}
	}
	if len(m.LeasePreferences) > 0 {
		for _, e := range m.LeasePreferences {
			l = e.Size()
			n += 1 + l + sovZone(uint64(l))
		}
	}
	n += 2
	n += 2
	if m.GlobalReads != nil {
		n += 2
	}
	if m.NumVoters != nil {
		n += 1 + sovZone(uint64(*m.NumVoters))
	}
	if len(m.VoterConstraints) > 0 {
		for _, e := range m.VoterConstraints {
			l = e.Size()
			n += 1 + l + sovZone(uint64(l))
		}
	}
	n += 2
	return n
}

func (m *Subzone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovZone(uint64(m.IndexID))
	l = len(m.PartitionName)
	n += 1 + l + sovZone(uint64(l))
	l = m.Config.Size()
	n += 1 + l + sovZone(uint64(l))
	return n
}

func (m *SubzoneSpan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovZone(uint64(l))
	}
	if m.EndKey != nil {
		l = len(m.EndKey)
		n += 1 + l + sovZone(uint64(l))
	}
	n += 1 + sovZone(uint64(m.SubzoneIndex))
	return n
}

func sovZone(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZone(x uint64) (n int) {
	return sovZone(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GCPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GCPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GCPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTLSeconds", wireType)
			}
			m.TTLSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TTLSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Constraint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Constraint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Constraint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Constraint_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConstraintsConjunction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConstraintsConjunction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConstraintsConjunction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constraints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Constraints = append(m.Constraints, Constraint{})
			if err := m.Constraints[len(m.Constraints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumReplicas", wireType)
			}
			m.NumReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumReplicas |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeasePreference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeasePreference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeasePreference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constraints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Constraints = append(m.Constraints, Constraint{})
			if err := m.Constraints[len(m.Constraints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZoneConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZoneConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZoneConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeMinBytes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RangeMinBytes = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeMaxBytes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RangeMaxBytes = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GC == nil {
				m.GC = &GCPolicy{}
			}
			if err := m.GC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumReplicas", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumReplicas = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constraints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Constraints = append(m.Constraints, ConstraintsConjunction{})
			if err := m.Constraints[len(m.Constraints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubzoneSpans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubzoneSpans = append(m.SubzoneSpans, SubzoneSpan{})
			if err := m.SubzoneSpans[len(m.SubzoneSpans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subzones", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subzones = append(m.Subzones, Subzone{})
			if err := m.Subzones[len(m.Subzones)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeasePreferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeasePreferences = append(m.LeasePreferences, LeasePreference{})
			if err := m.LeasePreferences[len(m.LeasePreferences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InheritedConstraints", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InheritedConstraints = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InheritedLeasePreferences", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InheritedLeasePreferences = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalReads", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.GlobalReads = &b
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumVoters", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumVoters = &v
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterConstraints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterConstraints = append(m.VoterConstraints, ConstraintsConjunction{})
			if err := m.VoterConstraints[len(m.VoterConstraints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InheritedVoterConstraints", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InheritedVoterConstraints = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipZone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Subzone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subzone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subzone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexID", wireType)
			}
			m.IndexID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartitionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubzoneSpan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubzoneSpan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubzoneSpan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZone
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = append(m.EndKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EndKey == nil {
				m.EndKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubzoneIndex", wireType)
			}
			m.SubzoneIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubzoneIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZone(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZone
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZone
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZone
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZone
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZone        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZone          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZone = fmt.Errorf("proto: unexpected end of group")
)
