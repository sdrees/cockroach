exec-ddl
CREATE TABLE bx (
  b INT PRIMARY KEY,
  x INT
)
----

exec-ddl
CREATE TABLE cy (
  c INT PRIMARY KEY,
  y INT
)
----

exec-ddl
CREATE TABLE dz (
  d INT PRIMARY KEY,
  z INT
)
----

exec-ddl
CREATE TABLE abc (
  a INT PRIMARY KEY,
  b INT,
  c INT,
  d INT
)
----

opt join-limit=2 expect=ReorderJoins
SELECT * FROM abc, bx, cy WHERE a = 1 AND abc.b = bx.b AND abc.c = cy.c
----
inner-join (lookup cy)
 ├── columns: a:1!null b:2!null c:3!null d:4 b:6!null x:7 c:9!null y:10
 ├── key columns: [3] = [9]
 ├── lookup columns are key
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1-4,6,7,9,10)
 ├── inner-join (lookup bx)
 │    ├── columns: a:1!null abc.b:2!null abc.c:3 d:4 bx.b:6!null x:7
 │    ├── key columns: [2] = [6]
 │    ├── lookup columns are key
 │    ├── cardinality: [0 - 1]
 │    ├── key: ()
 │    ├── fd: ()-->(1-4,6,7)
 │    ├── scan abc
 │    │    ├── columns: a:1!null abc.b:2 abc.c:3 d:4
 │    │    ├── constraint: /1: [/1 - /1]
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── key: ()
 │    │    └── fd: ()-->(1-4)
 │    └── filters (true)
 └── filters (true)

opt join-limit=2 expect=ReorderJoins
SELECT * FROM bx, abc, cy WHERE a = 1 AND abc.b = bx.b AND abc.c = cy.c
----
inner-join (lookup cy)
 ├── columns: b:1!null x:2 a:4!null b:5!null c:6!null d:7 c:9!null y:10
 ├── key columns: [6] = [9]
 ├── lookup columns are key
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1,2,4-7,9,10)
 ├── inner-join (lookup bx)
 │    ├── columns: bx.b:1!null x:2 a:4!null abc.b:5!null abc.c:6 d:7
 │    ├── key columns: [5] = [1]
 │    ├── lookup columns are key
 │    ├── cardinality: [0 - 1]
 │    ├── key: ()
 │    ├── fd: ()-->(1,2,4-7)
 │    ├── scan abc
 │    │    ├── columns: a:4!null abc.b:5 abc.c:6 d:7
 │    │    ├── constraint: /4: [/1 - /1]
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── key: ()
 │    │    └── fd: ()-->(4-7)
 │    └── filters (true)
 └── filters (true)

opt join-limit=2 expect=ReorderJoins
SELECT * FROM bx, cy, abc WHERE a = 1 AND abc.b = bx.b AND abc.c = cy.c
----
inner-join (lookup bx)
 ├── columns: b:1!null x:2 c:4!null y:5 a:7!null b:8!null c:9!null d:10
 ├── key columns: [8] = [1]
 ├── lookup columns are key
 ├── cardinality: [0 - 1]
 ├── key: ()
 ├── fd: ()-->(1,2,4,5,7-10)
 ├── inner-join (lookup cy)
 │    ├── columns: cy.c:4!null y:5 a:7!null abc.b:8 abc.c:9!null d:10
 │    ├── key columns: [9] = [4]
 │    ├── lookup columns are key
 │    ├── cardinality: [0 - 1]
 │    ├── key: ()
 │    ├── fd: ()-->(4,5,7-10)
 │    ├── scan abc
 │    │    ├── columns: a:7!null abc.b:8 abc.c:9 d:10
 │    │    ├── constraint: /7: [/1 - /1]
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── key: ()
 │    │    └── fd: ()-->(7-10)
 │    └── filters (true)
 └── filters (true)

# Only the bottom two joins should be reordered. The third join can only be
# commuted.
memo join-limit=2 expect=ReorderJoins
SELECT *
FROM bx, cy, dz, abc
WHERE a = 1 AND abc.b = bx.b AND abc.c = cy.c AND cy.c = dz.d
----
memo (optimized, ~45KB, required=[presentation: b:1,x:2,c:4,y:5,d:7,z:8,a:10,b:11,c:12,d:13])
 ├── G1: (inner-join G2 G3 G4) (inner-join G3 G2 G4) (merge-join G2 G3 G5 inner-join,+1,+11) (lookup-join G3 G5 bx,keyCols=[11],outCols=(1,2,4,5,7,8,10-13))
 │    └── [presentation: b:1,x:2,c:4,y:5,d:7,z:8,a:10,b:11,c:12,d:13]
 │         ├── best: (lookup-join G3 G5 bx,keyCols=[11],outCols=(1,2,4,5,7,8,10-13))
 │         └── cost: 19.19
 ├── G2: (scan bx,cols=(1,2))
 │    ├── [ordering: +1]
 │    │    ├── best: (scan bx,cols=(1,2))
 │    │    └── cost: 1040.02
 │    └── []
 │         ├── best: (scan bx,cols=(1,2))
 │         └── cost: 1040.02
 ├── G3: (inner-join G6 G7 G8) (inner-join G9 G10 G11) (inner-join G7 G6 G8) (merge-join G6 G7 G5 inner-join,+4,+7) (inner-join G10 G9 G11) (merge-join G9 G10 G5 inner-join,+7,+12) (lookup-join G12 G11 abc,keyCols=[16],outCols=(4,5,7,8,10-13)) (merge-join G7 G6 G5 inner-join,+7,+4) (lookup-join G7 G5 cy,keyCols=[7],outCols=(4,5,7,8,10-13))
 │    └── []
 │         ├── best: (lookup-join G7 G5 cy,keyCols=[7],outCols=(4,5,7,8,10-13))
 │         └── cost: 13.15
 ├── G4: (filters G13)
 ├── G5: (filters)
 ├── G6: (scan cy,cols=(4,5))
 │    ├── [ordering: +4]
 │    │    ├── best: (scan cy,cols=(4,5))
 │    │    └── cost: 1040.02
 │    └── []
 │         ├── best: (scan cy,cols=(4,5))
 │         └── cost: 1040.02
 ├── G7: (inner-join G14 G10 G11) (inner-join G10 G14 G11) (merge-join G14 G10 G5 inner-join,+7,+12) (lookup-join G15 G11 abc,keyCols=[15],outCols=(7,8,10-13)) (lookup-join G10 G5 dz,keyCols=[12],outCols=(7,8,10-13))
 │    └── []
 │         ├── best: (lookup-join G10 G5 dz,keyCols=[12],outCols=(7,8,10-13))
 │         └── cost: 7.13
 ├── G8: (filters G16)
 ├── G9: (inner-join G6 G14 G8) (inner-join G14 G6 G8) (merge-join G6 G14 G5 inner-join,+4,+7) (lookup-join G6 G5 dz,keyCols=[4],outCols=(4,5,7,8)) (merge-join G14 G6 G5 inner-join,+7,+4) (lookup-join G14 G5 cy,keyCols=[7],outCols=(4,5,7,8))
 │    ├── [ordering: +(4|7)]
 │    │    ├── best: (merge-join G6="[ordering: +4]" G14="[ordering: +7]" G5 inner-join,+4,+7)
 │    │    └── cost: 2110.05
 │    └── []
 │         ├── best: (merge-join G6="[ordering: +4]" G14="[ordering: +7]" G5 inner-join,+4,+7)
 │         └── cost: 2110.05
 ├── G10: (select G17 G18) (scan abc,cols=(10-13),constrained)
 │    └── []
 │         ├── best: (scan abc,cols=(10-13),constrained)
 │         └── cost: 1.09
 ├── G11: (filters G19)
 ├── G12: (project G9 G20 c y d z)
 │    └── []
 │         ├── best: (project G9 G20 c y d z)
 │         └── cost: 2130.06
 ├── G13: (eq G21 G22)
 ├── G14: (scan dz,cols=(7,8))
 │    ├── [ordering: +7]
 │    │    ├── best: (scan dz,cols=(7,8))
 │    │    └── cost: 1040.02
 │    └── []
 │         ├── best: (scan dz,cols=(7,8))
 │         └── cost: 1040.02
 ├── G15: (project G14 G20 d z)
 │    └── []
 │         ├── best: (project G14 G20 d z)
 │         └── cost: 1060.03
 ├── G16: (eq G23 G24)
 ├── G17: (scan abc,cols=(10-13))
 │    └── []
 │         ├── best: (scan abc,cols=(10-13))
 │         └── cost: 1080.02
 ├── G18: (filters G25)
 ├── G19: (eq G24 G26)
 ├── G20: (projections G27)
 ├── G21: (variable abc.b)
 ├── G22: (variable bx.b)
 ├── G23: (variable cy.c)
 ├── G24: (variable dz.d)
 ├── G25: (eq G28 G27)
 ├── G26: (variable abc.c)
 ├── G27: (const 1)
 └── G28: (variable a)

# No joins should be reordered besides commutation.
memo join-limit=0 expect-not=ReorderJoins
SELECT * FROM bx, cy, abc WHERE a = 1 AND abc.b = bx.b AND abc.c = cy.c
----
memo (optimized, ~26KB, required=[presentation: b:1,x:2,c:4,y:5,a:7,b:8,c:9,d:10])
 ├── G1: (inner-join G2 G3 G4) (inner-join G3 G2 G4) (merge-join G2 G3 G5 inner-join,+1,+8) (lookup-join G3 G5 bx,keyCols=[8],outCols=(1,2,4,5,7-10))
 │    └── [presentation: b:1,x:2,c:4,y:5,a:7,b:8,c:9,d:10]
 │         ├── best: (lookup-join G3 G5 bx,keyCols=[8],outCols=(1,2,4,5,7-10))
 │         └── cost: 13.13
 ├── G2: (scan bx,cols=(1,2))
 │    ├── [ordering: +1]
 │    │    ├── best: (scan bx,cols=(1,2))
 │    │    └── cost: 1040.02
 │    └── []
 │         ├── best: (scan bx,cols=(1,2))
 │         └── cost: 1040.02
 ├── G3: (inner-join G6 G7 G8) (inner-join G7 G6 G8) (merge-join G6 G7 G5 inner-join,+4,+9) (lookup-join G9 G8 abc,keyCols=[12],outCols=(4,5,7-10)) (lookup-join G7 G5 cy,keyCols=[9],outCols=(4,5,7-10))
 │    └── []
 │         ├── best: (lookup-join G7 G5 cy,keyCols=[9],outCols=(4,5,7-10))
 │         └── cost: 7.13
 ├── G4: (filters G10)
 ├── G5: (filters)
 ├── G6: (scan cy,cols=(4,5))
 │    ├── [ordering: +4]
 │    │    ├── best: (scan cy,cols=(4,5))
 │    │    └── cost: 1040.02
 │    └── []
 │         ├── best: (scan cy,cols=(4,5))
 │         └── cost: 1040.02
 ├── G7: (select G11 G12) (scan abc,cols=(7-10),constrained)
 │    └── []
 │         ├── best: (scan abc,cols=(7-10),constrained)
 │         └── cost: 1.09
 ├── G8: (filters G13)
 ├── G9: (project G6 G14 c y)
 │    └── []
 │         ├── best: (project G6 G14 c y)
 │         └── cost: 1060.03
 ├── G10: (eq G15 G16)
 ├── G11: (scan abc,cols=(7-10))
 │    └── []
 │         ├── best: (scan abc,cols=(7-10))
 │         └── cost: 1080.02
 ├── G12: (filters G17)
 ├── G13: (eq G18 G19)
 ├── G14: (projections G20)
 ├── G15: (variable abc.b)
 ├── G16: (variable bx.b)
 ├── G17: (eq G21 G20)
 ├── G18: (variable abc.c)
 ├── G19: (variable cy.c)
 ├── G20: (const 1)
 └── G21: (variable a)

memo join-limit=2
SELECT * FROM bx, cy, abc WHERE a = 1 AND abc.b = bx.b AND abc.c = cy.c
----
memo (optimized, ~35KB, required=[presentation: b:1,x:2,c:4,y:5,a:7,b:8,c:9,d:10])
 ├── G1: (inner-join G2 G3 G4) (inner-join G5 G6 G7) (inner-join G3 G2 G4) (merge-join G2 G3 G8 inner-join,+1,+8) (inner-join G6 G5 G7) (merge-join G5 G6 G8 inner-join,+4,+9) (lookup-join G3 G8 bx,keyCols=[8],outCols=(1,2,4,5,7-10)) (lookup-join G6 G8 cy,keyCols=[9],outCols=(1,2,4,5,7-10))
 │    └── [presentation: b:1,x:2,c:4,y:5,a:7,b:8,c:9,d:10]
 │         ├── best: (lookup-join G3 G8 bx,keyCols=[8],outCols=(1,2,4,5,7-10))
 │         └── cost: 13.13
 ├── G2: (scan bx,cols=(1,2))
 │    ├── [ordering: +1]
 │    │    ├── best: (scan bx,cols=(1,2))
 │    │    └── cost: 1040.02
 │    └── []
 │         ├── best: (scan bx,cols=(1,2))
 │         └── cost: 1040.02
 ├── G3: (inner-join G5 G9 G7) (inner-join G9 G5 G7) (merge-join G5 G9 G8 inner-join,+4,+9) (lookup-join G10 G7 abc,keyCols=[12],outCols=(4,5,7-10)) (lookup-join G9 G8 cy,keyCols=[9],outCols=(4,5,7-10))
 │    └── []
 │         ├── best: (lookup-join G9 G8 cy,keyCols=[9],outCols=(4,5,7-10))
 │         └── cost: 7.13
 ├── G4: (filters G11)
 ├── G5: (scan cy,cols=(4,5))
 │    ├── [ordering: +4]
 │    │    ├── best: (scan cy,cols=(4,5))
 │    │    └── cost: 1040.02
 │    └── []
 │         ├── best: (scan cy,cols=(4,5))
 │         └── cost: 1040.02
 ├── G6: (inner-join G2 G9 G4) (inner-join G9 G2 G4) (merge-join G2 G9 G8 inner-join,+1,+8) (lookup-join G12 G4 abc,keyCols=[13],outCols=(1,2,7-10)) (lookup-join G9 G8 bx,keyCols=[8],outCols=(1,2,7-10))
 │    └── []
 │         ├── best: (lookup-join G9 G8 bx,keyCols=[8],outCols=(1,2,7-10))
 │         └── cost: 7.13
 ├── G7: (filters G13)
 ├── G8: (filters)
 ├── G9: (select G14 G15) (scan abc,cols=(7-10),constrained)
 │    └── []
 │         ├── best: (scan abc,cols=(7-10),constrained)
 │         └── cost: 1.09
 ├── G10: (project G5 G16 c y)
 │    └── []
 │         ├── best: (project G5 G16 c y)
 │         └── cost: 1060.03
 ├── G11: (eq G17 G18)
 ├── G12: (project G2 G16 b x)
 │    └── []
 │         ├── best: (project G2 G16 b x)
 │         └── cost: 1060.03
 ├── G13: (eq G19 G20)
 ├── G14: (scan abc,cols=(7-10))
 │    └── []
 │         ├── best: (scan abc,cols=(7-10))
 │         └── cost: 1080.02
 ├── G15: (filters G21)
 ├── G16: (projections G22)
 ├── G17: (variable abc.b)
 ├── G18: (variable bx.b)
 ├── G19: (variable abc.c)
 ├── G20: (variable cy.c)
 ├── G21: (eq G23 G22)
 ├── G22: (const 1)
 └── G23: (variable a)

opt join-limit=3 expect=ReorderJoins
SELECT * FROM bx, cy, dz, abc WHERE a = 1
----
inner-join (cross)
 ├── columns: b:1!null x:2 c:4!null y:5 d:7!null z:8 a:10!null b:11 c:12 d:13
 ├── key: (1,4,7)
 ├── fd: ()-->(10-13), (1)-->(2), (4)-->(5), (7)-->(8)
 ├── inner-join (cross)
 │    ├── columns: cy.c:4!null y:5 dz.d:7!null z:8 a:10!null abc.b:11 abc.c:12 abc.d:13
 │    ├── key: (4,7)
 │    ├── fd: ()-->(10-13), (4)-->(5), (7)-->(8)
 │    ├── scan cy
 │    │    ├── columns: cy.c:4!null y:5
 │    │    ├── key: (4)
 │    │    └── fd: (4)-->(5)
 │    ├── inner-join (cross)
 │    │    ├── columns: dz.d:7!null z:8 a:10!null abc.b:11 abc.c:12 abc.d:13
 │    │    ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │    │    ├── key: (7)
 │    │    ├── fd: ()-->(10-13), (7)-->(8)
 │    │    ├── scan dz
 │    │    │    ├── columns: dz.d:7!null z:8
 │    │    │    ├── key: (7)
 │    │    │    └── fd: (7)-->(8)
 │    │    ├── scan abc
 │    │    │    ├── columns: a:10!null abc.b:11 abc.c:12 abc.d:13
 │    │    │    ├── constraint: /10: [/1 - /1]
 │    │    │    ├── cardinality: [0 - 1]
 │    │    │    ├── key: ()
 │    │    │    └── fd: ()-->(10-13)
 │    │    └── filters (true)
 │    └── filters (true)
 ├── scan bx
 │    ├── columns: bx.b:1!null x:2
 │    ├── key: (1)
 │    └── fd: (1)-->(2)
 └── filters (true)

opt join-limit=2 format=show-all
SELECT * FROM abc, bx, cy, dz WHERE a = 1
----
inner-join (cross)
 ├── columns: a:1(int!null) b:2(int) c:3(int) d:4(int) b:6(int!null) x:7(int) c:9(int!null) y:10(int) d:12(int!null) z:13(int)
 ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 ├── stats: [rows=1e+09]
 ├── cost: 32525668.7
 ├── key: (6,9,12)
 ├── fd: ()-->(1-4), (6)-->(7), (9)-->(10), (12)-->(13)
 ├── prune: (2-4,6,7,9,10,12,13)
 ├── interesting orderings: (+1) (+6) (+9) (+12)
 ├── join-size: 3
 ├── inner-join (cross)
 │    ├── columns: t.public.bx.b:6(int!null) t.public.bx.x:7(int) t.public.cy.c:9(int!null) t.public.cy.y:10(int) t.public.dz.d:12(int!null) t.public.dz.z:13(int)
 │    ├── stats: [rows=1e+09]
 │    ├── cost: 10025667.6
 │    ├── key: (6,9,12)
 │    ├── fd: (6)-->(7), (9)-->(10), (12)-->(13)
 │    ├── prune: (6,7,9,10,12,13)
 │    ├── interesting orderings: (+6) (+9) (+12)
 │    ├── join-size: 2
 │    ├── inner-join (cross)
 │    │    ├── columns: t.public.cy.c:9(int!null) t.public.cy.y:10(int) t.public.dz.d:12(int!null) t.public.dz.z:13(int)
 │    │    ├── stats: [rows=1000000]
 │    │    ├── cost: 12110.05
 │    │    ├── key: (9,12)
 │    │    ├── fd: (9)-->(10), (12)-->(13)
 │    │    ├── prune: (9,10,12,13)
 │    │    ├── interesting orderings: (+9) (+12)
 │    │    ├── scan t.public.cy
 │    │    │    ├── columns: t.public.cy.c:9(int!null) t.public.cy.y:10(int)
 │    │    │    ├── stats: [rows=1000]
 │    │    │    ├── cost: 1040.02
 │    │    │    ├── key: (9)
 │    │    │    ├── fd: (9)-->(10)
 │    │    │    ├── prune: (9,10)
 │    │    │    ├── interesting orderings: (+9)
 │    │    │    └── unfiltered-cols: (9-11)
 │    │    ├── scan t.public.dz
 │    │    │    ├── columns: t.public.dz.d:12(int!null) t.public.dz.z:13(int)
 │    │    │    ├── stats: [rows=1000]
 │    │    │    ├── cost: 1040.02
 │    │    │    ├── key: (12)
 │    │    │    ├── fd: (12)-->(13)
 │    │    │    ├── prune: (12,13)
 │    │    │    ├── interesting orderings: (+12)
 │    │    │    └── unfiltered-cols: (12-14)
 │    │    └── filters (true)
 │    ├── scan t.public.bx
 │    │    ├── columns: t.public.bx.b:6(int!null) t.public.bx.x:7(int)
 │    │    ├── stats: [rows=1000]
 │    │    ├── cost: 1040.02
 │    │    ├── key: (6)
 │    │    ├── fd: (6)-->(7)
 │    │    ├── prune: (6,7)
 │    │    ├── interesting orderings: (+6)
 │    │    └── unfiltered-cols: (6-8)
 │    └── filters (true)
 ├── scan t.public.abc
 │    ├── columns: t.public.abc.a:1(int!null) t.public.abc.b:2(int) t.public.abc.c:3(int) t.public.abc.d:4(int)
 │    ├── constraint: /1: [/1 - /1]
 │    ├── cardinality: [0 - 1]
 │    ├── stats: [rows=1, distinct(1)=1, null(1)=0]
 │    ├── cost: 1.09
 │    ├── key: ()
 │    ├── fd: ()-->(1-4)
 │    ├── prune: (2-4)
 │    └── interesting orderings: (+1)
 └── filters (true)

# Note the difference in memo size for with and without reorder-joins, for only four tables.
# TODO(justin): Find a way to reduce this.

memo join-limit=0
SELECT * FROM bx, cy, dz, abc WHERE x = y AND y = z AND z = a
----
memo (optimized, ~24KB, required=[presentation: b:1,x:2,c:4,y:5,d:7,z:8,a:10,b:11,c:12,d:13])
 ├── G1: (inner-join G2 G3 G4) (inner-join G3 G2 G4)
 │    └── [presentation: b:1,x:2,c:4,y:5,d:7,z:8,a:10,b:11,c:12,d:13]
 │         ├── best: (inner-join G3 G2 G4)
 │         └── cost: 5478.19
 ├── G2: (scan bx,cols=(1,2))
 │    └── []
 │         ├── best: (scan bx,cols=(1,2))
 │         └── cost: 1040.02
 ├── G3: (inner-join G5 G6 G7) (inner-join G6 G5 G7)
 │    └── []
 │         ├── best: (inner-join G5 G6 G7)
 │         └── cost: 3327.84
 ├── G4: (filters G8)
 ├── G5: (scan cy,cols=(4,5))
 │    └── []
 │         ├── best: (scan cy,cols=(4,5))
 │         └── cost: 1040.02
 ├── G6: (inner-join G9 G10 G11) (inner-join G10 G9 G11) (lookup-join G9 G12 abc,keyCols=[8],outCols=(7,8,10-13)) (merge-join G10 G9 G12 inner-join,+10,+8)
 │    └── []
 │         ├── best: (inner-join G9 G10 G11)
 │         └── cost: 2159.96
 ├── G7: (filters G13)
 ├── G8: (eq G14 G15)
 ├── G9: (scan dz,cols=(7,8))
 │    ├── [ordering: +8]
 │    │    ├── best: (sort G9)
 │    │    └── cost: 1259.35
 │    └── []
 │         ├── best: (scan dz,cols=(7,8))
 │         └── cost: 1040.02
 ├── G10: (scan abc,cols=(10-13))
 │    ├── [ordering: +10]
 │    │    ├── best: (scan abc,cols=(10-13))
 │    │    └── cost: 1080.02
 │    └── []
 │         ├── best: (scan abc,cols=(10-13))
 │         └── cost: 1080.02
 ├── G11: (filters G16)
 ├── G12: (filters)
 ├── G13: (eq G15 G17)
 ├── G14: (variable x)
 ├── G15: (variable y)
 ├── G16: (eq G17 G18)
 ├── G17: (variable z)
 └── G18: (variable a)

# This query is the worst-case scenario for join ordering because all relations
# are connected, which allows every join order to be added to the memo.
# TODO(drewk): implement branch pruning and/or a max operator limit for the
# memo.
memo join-limit=3
SELECT * FROM bx, cy, dz, abc WHERE x = y AND y = z AND z = a
----
memo (optimized, ~50KB, required=[presentation: b:1,x:2,c:4,y:5,d:7,z:8,a:10,b:11,c:12,d:13])
 ├── G1: (inner-join G2 G3 G4) (inner-join G5 G6 G4) (inner-join G7 G8 G9) (inner-join G10 G11 G9) (inner-join G12 G13 G4) (inner-join G14 G15 G4) (inner-join G16 G17 G18) (inner-join G3 G2 G4) (inner-join G6 G5 G4) (inner-join G8 G7 G9) (inner-join G11 G10 G9) (inner-join G13 G12 G4) (inner-join G15 G14 G4) (inner-join G17 G16 G18) (lookup-join G16 G19 abc,keyCols=[8],outCols=(1,2,4,5,7,8,10-13)) (merge-join G17 G16 G19 inner-join,+10,+8)
 │    └── [presentation: b:1,x:2,c:4,y:5,d:7,z:8,a:10,b:11,c:12,d:13]
 │         ├── best: (inner-join G7 G8 G9)
 │         └── cost: 5478.19
 ├── G2: (scan bx,cols=(1,2))
 │    ├── [ordering: +2]
 │    │    ├── best: (sort G2)
 │    │    └── cost: 1259.35
 │    └── []
 │         ├── best: (scan bx,cols=(1,2))
 │         └── cost: 1040.02
 ├── G3: (inner-join G5 G8 G9) (inner-join G10 G13 G9) (inner-join G14 G17 G18) (inner-join G8 G5 G9) (inner-join G13 G10 G9) (inner-join G17 G14 G18) (lookup-join G14 G19 abc,keyCols=[8],outCols=(4,5,7,8,10-13)) (merge-join G17 G14 G19 inner-join,+10,+8)
 │    └── []
 │         ├── best: (inner-join G5 G8 G9)
 │         └── cost: 3327.84
 ├── G4: (filters G20)
 ├── G5: (scan cy,cols=(4,5))
 │    ├── [ordering: +5]
 │    │    ├── best: (sort G5)
 │    │    └── cost: 1259.35
 │    └── []
 │         ├── best: (scan cy,cols=(4,5))
 │         └── cost: 1040.02
 ├── G6: (inner-join G2 G8 G21) (inner-join G10 G15 G18) (inner-join G12 G17 G18) (inner-join G8 G2 G21) (inner-join G15 G10 G18) (inner-join G17 G12 G18) (lookup-join G12 G19 abc,keyCols=[8],outCols=(1,2,7,8,10-13)) (merge-join G15 G10 G19 inner-join,+10,+8) (merge-join G17 G12 G19 inner-join,+10,+8)
 │    └── []
 │         ├── best: (inner-join G2 G8 G21)
 │         └── cost: 3327.84
 ├── G7: (inner-join G2 G5 G4) (inner-join G5 G2 G4)
 │    ├── [ordering: +(2|5)]
 │    │    ├── best: (sort G7)
 │    │    └── cost: 5003.07
 │    └── []
 │         ├── best: (inner-join G2 G5 G4)
 │         └── cost: 2208.07
 ├── G8: (inner-join G10 G17 G18) (inner-join G17 G10 G18) (lookup-join G10 G19 abc,keyCols=[8],outCols=(7,8,10-13)) (merge-join G17 G10 G19 inner-join,+10,+8)
 │    └── []
 │         ├── best: (inner-join G10 G17 G18)
 │         └── cost: 2159.96
 ├── G9: (filters G22)
 ├── G10: (scan dz,cols=(7,8))
 │    ├── [ordering: +8]
 │    │    ├── best: (sort G10)
 │    │    └── cost: 1259.35
 │    └── []
 │         ├── best: (scan dz,cols=(7,8))
 │         └── cost: 1040.02
 ├── G11: (inner-join G2 G13 G4) (inner-join G5 G15 G4) (inner-join G7 G17 G23) (inner-join G13 G2 G4) (inner-join G15 G5 G4) (inner-join G17 G7 G23) (lookup-join G7 G19 abc,keyCols=[5],outCols=(1,2,4,5,10-13)) (merge-join G17 G7 G19 inner-join,+10,+5)
 │    └── []
 │         ├── best: (inner-join G2 G13 G4)
 │         └── cost: 3327.84
 ├── G12: (inner-join G2 G10 G21) (inner-join G10 G2 G21)
 │    ├── [ordering: +(2|8)]
 │    │    ├── best: (sort G12)
 │    │    └── cost: 5003.07
 │    └── []
 │         ├── best: (inner-join G2 G10 G21)
 │         └── cost: 2208.07
 ├── G13: (inner-join G5 G17 G23) (inner-join G17 G5 G23) (lookup-join G5 G19 abc,keyCols=[5],outCols=(4,5,10-13)) (merge-join G17 G5 G19 inner-join,+10,+5)
 │    └── []
 │         ├── best: (inner-join G5 G17 G23)
 │         └── cost: 2159.96
 ├── G14: (inner-join G5 G10 G9) (inner-join G10 G5 G9)
 │    ├── [ordering: +(5|8)]
 │    │    ├── best: (sort G14)
 │    │    └── cost: 5003.07
 │    └── []
 │         ├── best: (inner-join G5 G10 G9)
 │         └── cost: 2208.07
 ├── G15: (inner-join G2 G17 G24) (inner-join G17 G2 G24) (lookup-join G2 G19 abc,keyCols=[2],outCols=(1,2,10-13)) (merge-join G17 G2 G19 inner-join,+10,+2)
 │    ├── [ordering: +(2|10)]
 │    │    ├── best: (merge-join G17="[ordering: +10]" G2="[ordering: +2]" G19 inner-join,+10,+2)
 │    │    └── cost: 2369.28
 │    └── []
 │         ├── best: (inner-join G2 G17 G24)
 │         └── cost: 2159.96
 ├── G16: (inner-join G2 G14 G4) (inner-join G5 G12 G4) (inner-join G7 G10 G9) (inner-join G14 G2 G4) (inner-join G12 G5 G4) (inner-join G10 G7 G9)
 │    ├── [ordering: +(2|5|8)]
 │    │    ├── best: (sort G16)
 │    │    └── cost: 38447.25
 │    └── []
 │         ├── best: (inner-join G7 G10 G9)
 │         └── cost: 4358.42
 ├── G17: (scan abc,cols=(10-13))
 │    ├── [ordering: +10]
 │    │    ├── best: (scan abc,cols=(10-13))
 │    │    └── cost: 1080.02
 │    └── []
 │         ├── best: (scan abc,cols=(10-13))
 │         └── cost: 1080.02
 ├── G18: (filters G25)
 ├── G19: (filters)
 ├── G20: (eq G26 G27)
 ├── G21: (filters G28)
 ├── G22: (eq G27 G29)
 ├── G23: (filters G30)
 ├── G24: (filters G31)
 ├── G25: (eq G29 G32)
 ├── G26: (variable x)
 ├── G27: (variable y)
 ├── G28: (eq G26 G29)
 ├── G29: (variable z)
 ├── G30: (eq G27 G32)
 ├── G31: (eq G26 G32)
 └── G32: (variable a)

opt
SELECT * FROM bx, cy, dz, abc WHERE x = y AND y = z AND z = a
----
inner-join (hash)
 ├── columns: b:1!null x:2!null c:4!null y:5!null d:7!null z:8!null a:10!null b:11 c:12 d:13
 ├── key: (1,4,7)
 ├── fd: (1)-->(2), (4)-->(5), (7)-->(8), (10)-->(11-13), (8)==(2,5,10), (10)==(2,5,8), (5)==(2,8,10), (2)==(5,8,10)
 ├── inner-join (hash)
 │    ├── columns: bx.b:1!null x:2!null cy.c:4!null y:5!null
 │    ├── key: (1,4)
 │    ├── fd: (1)-->(2), (4)-->(5), (2)==(5), (5)==(2)
 │    ├── scan bx
 │    │    ├── columns: bx.b:1!null x:2
 │    │    ├── key: (1)
 │    │    └── fd: (1)-->(2)
 │    ├── scan cy
 │    │    ├── columns: cy.c:4!null y:5
 │    │    ├── key: (4)
 │    │    └── fd: (4)-->(5)
 │    └── filters
 │         └── x:2 = y:5 [outer=(2,5), constraints=(/2: (/NULL - ]; /5: (/NULL - ]), fd=(2)==(5), (5)==(2)]
 ├── inner-join (hash)
 │    ├── columns: dz.d:7!null z:8!null a:10!null abc.b:11 abc.c:12 abc.d:13
 │    ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │    ├── key: (7)
 │    ├── fd: (7)-->(8), (10)-->(11-13), (8)==(10), (10)==(8)
 │    ├── scan dz
 │    │    ├── columns: dz.d:7!null z:8
 │    │    ├── key: (7)
 │    │    └── fd: (7)-->(8)
 │    ├── scan abc
 │    │    ├── columns: a:10!null abc.b:11 abc.c:12 abc.d:13
 │    │    ├── key: (10)
 │    │    └── fd: (10)-->(11-13)
 │    └── filters
 │         └── z:8 = a:10 [outer=(8,10), constraints=(/8: (/NULL - ]; /10: (/NULL - ]), fd=(8)==(10), (10)==(8)]
 └── filters
      └── y:5 = z:8 [outer=(5,8), constraints=(/5: (/NULL - ]; /8: (/NULL - ]), fd=(5)==(8), (8)==(5)]

# Regression test for #34795.
exec-ddl
CREATE TABLE a (id INT8 PRIMARY KEY)
----

opt join-limit=3
SELECT
    1
FROM
    a as a1
    INNER JOIN a as a2 ON 1 = a2.id
    INNER JOIN a AS a3 ON a1.id = a3.id
    CROSS JOIN a as a4
WHERE
    a4.id = 1 AND (SELECT true FROM a WHERE a1.id = 1)
----
project
 ├── columns: "?column?":12!null
 ├── fd: ()-->(12)
 ├── inner-join (cross)
 │    ├── columns: a1.id:1!null a2.id:3!null a3.id:5!null a4.id:7!null bool:11!null
 │    ├── multiplicity: left-rows(zero-or-one), right-rows(zero-or-more)
 │    ├── key: (5)
 │    ├── fd: ()-->(3,7,11), (1)==(5), (5)==(1)
 │    ├── inner-join (cross)
 │    │    ├── columns: a1.id:1!null a2.id:3!null a3.id:5!null bool:11!null
 │    │    ├── multiplicity: left-rows(zero-or-more), right-rows(zero-or-one)
 │    │    ├── key: (5)
 │    │    ├── fd: ()-->(3,11), (1)==(5), (5)==(1)
 │    │    ├── scan a2
 │    │    │    ├── columns: a2.id:3!null
 │    │    │    ├── constraint: /3: [/1 - /1]
 │    │    │    ├── cardinality: [0 - 1]
 │    │    │    ├── key: ()
 │    │    │    └── fd: ()-->(3)
 │    │    ├── inner-join (lookup a)
 │    │    │    ├── columns: a1.id:1!null a3.id:5!null bool:11!null
 │    │    │    ├── key columns: [1] = [5]
 │    │    │    ├── lookup columns are key
 │    │    │    ├── key: (5)
 │    │    │    ├── fd: ()-->(11), (1)==(5), (5)==(1)
 │    │    │    ├── select
 │    │    │    │    ├── columns: a1.id:1!null bool:11!null
 │    │    │    │    ├── key: (1)
 │    │    │    │    ├── fd: ()-->(11)
 │    │    │    │    ├── ensure-distinct-on
 │    │    │    │    │    ├── columns: a1.id:1!null bool:11
 │    │    │    │    │    ├── grouping columns: a1.id:1!null
 │    │    │    │    │    ├── error: "more than one row returned by a subquery used as an expression"
 │    │    │    │    │    ├── key: (1)
 │    │    │    │    │    ├── fd: (1)-->(11)
 │    │    │    │    │    ├── left-join (cross)
 │    │    │    │    │    │    ├── columns: a1.id:1!null bool:11
 │    │    │    │    │    │    ├── scan a1
 │    │    │    │    │    │    │    ├── columns: a1.id:1!null
 │    │    │    │    │    │    │    └── key: (1)
 │    │    │    │    │    │    ├── project
 │    │    │    │    │    │    │    ├── columns: bool:11!null
 │    │    │    │    │    │    │    ├── fd: ()-->(11)
 │    │    │    │    │    │    │    ├── scan a
 │    │    │    │    │    │    │    └── projections
 │    │    │    │    │    │    │         └── true [as=bool:11]
 │    │    │    │    │    │    └── filters
 │    │    │    │    │    │         └── a1.id:1 = 1 [outer=(1), constraints=(/1: [/1 - /1]; tight), fd=()-->(1)]
 │    │    │    │    │    └── aggregations
 │    │    │    │    │         └── const-agg [as=bool:11, outer=(11)]
 │    │    │    │    │              └── bool:11
 │    │    │    │    └── filters
 │    │    │    │         └── bool:11 [outer=(11), constraints=(/11: [/true - /true]; tight), fd=()-->(11)]
 │    │    │    └── filters (true)
 │    │    └── filters (true)
 │    ├── scan a4
 │    │    ├── columns: a4.id:7!null
 │    │    ├── constraint: /7: [/1 - /1]
 │    │    ├── cardinality: [0 - 1]
 │    │    ├── key: ()
 │    │    └── fd: ()-->(7)
 │    └── filters (true)
 └── projections
      └── 1 [as="?column?":12]

# An edge for b = d should be added to the graph.
reorderjoins format=hide-all
SELECT * FROM bx
INNER JOIN cy ON b = c
INNER JOIN (SELECT * FROM dz WHERE z > 0) ON c = d
----
----
--------------------------------------------------------------------------------
----Join Tree #1----
inner-join (hash)
 ├── inner-join (hash)
 │    ├── scan bx
 │    ├── scan cy
 │    └── filters
 │         └── b = c
 ├── select
 │    ├── scan dz
 │    └── filters
 │         └── z > 0
 └── filters
      └── c = d

----Vertexes----
A:
scan bx

B:
scan cy

C:
select
 ├── scan dz
 └── filters
      └── z > 0

----Edges----
b = c
c = d
b = d

----Joining AB----
A B    refs [AB]
----Joining AC----
A C    refs [AC]
----Joining BC----
B C    refs [BC]
----Joining ABC----
A BC    refs [AB]
B AC    refs [AB]
AB C    refs [BC]

Joins Considered: 6
--------------------------------------------------------------------------------
----Final Plan----
inner-join (merge)
 ├── scan bx
 ├── inner-join (merge)
 │    ├── scan cy
 │    ├── select
 │    │    ├── scan dz
 │    │    └── filters
 │    │         └── z > 0
 │    └── filters (true)
 └── filters (true)
--------------------------------------------------------------------------------
----
----

reorderjoins format=hide-all
SELECT * FROM bx
INNER JOIN cy ON b = c
INNER JOIN (SELECT max(z) AS m FROM dz) ON y = m
INNER JOIN abc ON m = a
----
----
--------------------------------------------------------------------------------
----Join Tree #1----
inner-join (hash)
 ├── inner-join (hash)
 │    ├── scan bx
 │    ├── scan cy
 │    └── filters
 │         └── bx.b = cy.c
 ├── scalar-group-by
 │    ├── scan dz
 │    └── aggregations
 │         └── max
 │              └── z
 └── filters
      └── y = max

----Vertexes----
A:
scan bx

B:
scan cy

C:
scalar-group-by
 ├── scan dz
 └── aggregations
      └── max
           └── z

----Edges----
bx.b = cy.c
y = max

----Joining AB----
A B    refs [AB]
----Joining BC----
B C    refs [BC]
----Joining ABC----
A BC    refs [AB]
AB C    refs [BC]

Joins Considered: 4
--------------------------------------------------------------------------------
----Join Tree #2----
inner-join (hash)
 ├── inner-join (hash)
 │    ├── inner-join (hash)
 │    │    ├── scan bx
 │    │    ├── scan cy
 │    │    └── filters
 │    │         └── bx.b = cy.c
 │    ├── scalar-group-by
 │    │    ├── scan dz
 │    │    └── aggregations
 │    │         └── max
 │    │              └── z
 │    └── filters
 │         └── y = max
 ├── scan abc
 └── filters
      └── max = a

----Vertexes----
A:
scan bx

B:
scan cy

C:
scalar-group-by
 ├── scan dz
 └── aggregations
      └── max
           └── z

D:
scan abc

----Edges----
bx.b = cy.c
y = max
max = a
y = a

----Joining AB----
A B    refs [AB]
----Joining BC----
B C    refs [BC]
----Joining ABC----
A BC    refs [AB]
AB C    refs [BC]
----Joining BD----
B D    refs [BD]
----Joining ABD----
A BD    refs [AB]
AB D    refs [BD]
----Joining CD----
C D    refs [CD]
----Joining BCD----
B CD    refs [BCD]
C BD    refs [BC]
BC D    refs [CD]
----Joining ABCD----
A BCD    refs [AB]
AB CD    refs [BCD]
C ABD    refs [BC]
ABC D    refs [CD]

Joins Considered: 15
--------------------------------------------------------------------------------
----Final Plan----
inner-join (lookup bx)
 ├── lookup columns are key
 ├── inner-join (hash)
 │    ├── scan cy
 │    ├── inner-join (lookup abc)
 │    │    ├── lookup columns are key
 │    │    ├── scalar-group-by
 │    │    │    ├── scan dz
 │    │    │    └── aggregations
 │    │    │         └── max
 │    │    │              └── z
 │    │    └── filters (true)
 │    └── filters
 │         ├── y = max
 │         └── y = a
 └── filters (true)
--------------------------------------------------------------------------------
----
----

# Treat the join with hints as a base relation.
reorderjoins format=hide-all
SELECT * FROM bx
INNER HASH JOIN cy ON x = y
INNER JOIN dz ON y = z
INNER JOIN abc ON z = a
----
----
--------------------------------------------------------------------------------
----Join Tree #1----
inner-join (hash)
 ├── inner-join (hash)
 │    ├── flags: force hash join (store right side)
 │    ├── scan bx
 │    ├── scan cy
 │    └── filters
 │         └── x = y
 ├── scan dz
 └── filters
      └── y = z

----Vertexes----
A:
inner-join (hash)
 ├── flags: force hash join (store right side)
 ├── scan bx
 ├── scan cy
 └── filters
      └── x = y

B:
scan dz

----Edges----
x = y
y = z
x = z


Joins Considered: 0
--------------------------------------------------------------------------------
----Join Tree #2----
inner-join (hash)
 ├── inner-join (hash)
 │    ├── inner-join (hash)
 │    │    ├── flags: force hash join (store right side)
 │    │    ├── scan bx
 │    │    ├── scan cy
 │    │    └── filters
 │    │         └── x = y
 │    ├── scan dz
 │    └── filters
 │         └── y = z
 ├── scan abc
 └── filters
      └── z = a

----Vertexes----
A:
inner-join (hash)
 ├── flags: force hash join (store right side)
 ├── scan bx
 ├── scan cy
 └── filters
      └── x = y

B:
scan dz

C:
scan abc

----Edges----
x = y
y = z
z = a
x = z
x = a
y = a

----Joining BC----
B C    refs [BC]
----Joining ABC----
AB C    refs [BC]

Joins Considered: 2
--------------------------------------------------------------------------------
----Final Plan----
inner-join (hash)
 ├── inner-join (hash)
 │    ├── inner-join (hash)
 │    │    ├── flags: force hash join (store right side)
 │    │    ├── scan bx
 │    │    ├── scan cy
 │    │    └── filters
 │    │         └── x = y
 │    ├── scan dz
 │    └── filters
 │         └── y = z
 ├── scan abc
 └── filters
      └── z = a
--------------------------------------------------------------------------------
----
----

# Treat the apply join as a base relation. However, all other joins can be
# reordered despite the presence of outer columns.
reorderjoins format=hide-all
SELECT * FROM bx
INNER JOIN LATERAL (
  SELECT * FROM (VALUES (x))
  INNER JOIN cy ON True
  INNER JOIN dz ON y = z
  INNER JOIN abc ON z = a
)
ON x = y
----
----
--------------------------------------------------------------------------------
----Join Tree #1----
inner-join (hash)
 ├── inner-join (hash)
 │    ├── scan cy
 │    ├── scan dz
 │    └── filters
 │         └── y = z
 ├── scan abc
 └── filters
      └── z = a

----Vertexes----
A:
scan cy

B:
scan dz

C:
scan abc

----Edges----
y = z
z = a
y = a

----Joining AB----
A B    refs [AB]
----Joining AC----
A C    refs [AC]
----Joining BC----
B C    refs [BC]
----Joining ABC----
A BC    refs [AB]
B AC    refs [AB]
AB C    refs [BC]

Joins Considered: 6
--------------------------------------------------------------------------------
----Join Tree #2----
inner-join (cross)
 ├── values
 │    └── (x,)
 ├── inner-join (hash)
 │    ├── inner-join (hash)
 │    │    ├── scan cy
 │    │    ├── scan dz
 │    │    └── filters
 │    │         └── y = z
 │    ├── scan abc
 │    └── filters
 │         └── z = a
 └── filters (true)

----Vertexes----
D:
values
 └── (x,)

A:
scan cy

B:
scan dz

C:
scan abc

----Edges----
y = z
z = a
y = a

----Joining AB----
A B    refs [AB]
----Joining AC----
A C    refs [AC]
----Joining BC----
B C    refs [BC]
----Joining ABC----
A BC    refs [AB]
B AC    refs [AB]
AB C    refs [BC]
----Joining DABC----
D ABC    refs []

Joins Considered: 7
--------------------------------------------------------------------------------
----Final Plan----
inner-join-apply
 ├── scan bx
 ├── inner-join (cross)
 │    ├── inner-join (hash)
 │    │    ├── scan cy
 │    │    ├── inner-join (hash)
 │    │    │    ├── scan dz
 │    │    │    ├── scan abc
 │    │    │    └── filters
 │    │    │         └── z = a
 │    │    └── filters
 │    │         └── y = z
 │    ├── values
 │    │    └── (x,)
 │    └── filters (true)
 └── filters
      └── x = y
--------------------------------------------------------------------------------
----
----

reorderjoins format=hide-all
SELECT * FROM (
  SELECT b AS bx_b, c AS cy_c
  FROM bx
  INNER JOIN cy ON x = y
)
INNER JOIN (
  SELECT b AS abc_b, c AS abc_c
  FROM abc
  INNER JOIN dz ON a = z
)
ON abc_b = bx_b AND abc_c = cy_c
----
----
--------------------------------------------------------------------------------
----Join Tree #1----
inner-join (hash)
 ├── inner-join (hash)
 │    ├── scan bx
 │    ├── scan cy
 │    └── filters
 │         └── x = y
 ├── inner-join (hash)
 │    ├── scan abc
 │    ├── scan dz
 │    └── filters
 │         └── a = z
 └── filters
      ├── abc.b = bx.b
      └── abc.c = cy.c

----Vertexes----
A:
scan bx

B:
scan cy

C:
scan abc

D:
scan dz

----Edges----
x = y
a = z
abc.b = bx.b
abc.c = cy.c

----Joining AB----
A B    refs [AB]
----Joining AC----
A C    refs [AC]
----Joining BC----
B C    refs [BC]
----Joining ABC----
A BC    refs [ABC]
B AC    refs [ABC]
AB C    refs [ABC]
----Joining CD----
C D    refs [CD]
----Joining ACD----
A CD    refs [AC]
AC D    refs [CD]
----Joining BCD----
B CD    refs [BC]
BC D    refs [CD]
----Joining ABCD----
A BCD    refs [ABC]
B ACD    refs [ABC]
AB CD    refs [ABC]
ABC D    refs [CD]

Joins Considered: 15
--------------------------------------------------------------------------------
----Final Plan----
project
 └── inner-join (hash)
      ├── scan dz
      ├── inner-join (hash)
      │    ├── scan bx
      │    ├── inner-join (hash)
      │    │    ├── scan cy
      │    │    ├── scan abc
      │    │    └── filters
      │    │         └── abc.c = cy.c
      │    └── filters
      │         ├── x = y
      │         └── abc.b = bx.b
      └── filters
           └── a = z
--------------------------------------------------------------------------------
----
----
